[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Enita Omuvwie Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/README.html","id":"ecampus","dir":"Articles","previous_headings":"","what":"eCampus","title":"eCampus Colors Guide","text":"eCampus package provides collection color palettes tools working eCampus brand colors. demonstrates access color palettes, visualize , generate gradients using eCampus colors. eCampus package contains color palettes R inspired eCampus. Installation Palette Table Palettes Package Functions USG Institutions eCampus Hues eCampus Enhanced Gradient Generator Notes","code":""},{"path":"/articles/README.html","id":"installation","dir":"Articles","previous_headings":"eCampus","what":"Installation","title":"eCampus Colors Guide","text":"can install development version ecampus GitHub :","code":"# If you don't have devtools installed, uncomment the following line to install it: # install.packages(\"devtools\")  # Install the eCampus package from GitHub devtools::install_github(\"LadyArnitah/eCampus\")"},{"path":"/articles/README.html","id":"palette-table","dir":"Articles","previous_headings":"eCampus","what":"Palette Table","title":"eCampus Colors Guide","text":"ecampus package includes color palettes different branches eCampus brand. palettes organized four main categories. category contains list colors corresponding hex codes. can view interactive eCampus Color Guide : examples eCampus palette credits [Learn UI Design] (https://www.learnui.design/tools/data-color-picker.html). code reproduce table :","code":"# Load libraries library(DT) library(ggplot2) library(dplyr) library(plotly) library(odbc) library(maps) library(colorspace) library(shiny) library(htmlwidgets) library(shinyjs) # Define color palettes for different branches ecampus_palette <- list(   \"USG-eCore\" = list(     \"Official Colors\" = c(\"eCore_Green\" = \"#7BA640\", \"eCore_Teal\" = \"#00A9A6\", \"eCore_Callout_Green\" = \"#C9D57F\", \"eCore_Callout_Teal\" = \"#B4E8E5\"),     \"Secondary Colors\" = c(\"eCore_Class_is_Greener\" = \"#7DAA45\", \"eCore_OER_Orange\" = \"#F6931E\", \"eCore_Professor_Plum\" = \"#8F3776\", \"eCore_Transferable_Teal\" = \"#03A59D\", \"eCore_Accredited_Gray\" = \"#555755\", \"eCore_Profread_Red\" = \"#CA2027\", \"eCore_Success_Team_Turquoise\" = \"#4CC2C5\",\"eCore_Banner_Blue\" = \"#21387D\",\"eCore_Deep_Thinking_Teal\" = \"#0F7F86\"),     \"Neutrals\" = c(\"eCore_Grateful_Gray\" = \"#848484\", \"eCore_Balanced_Blue\" = \"#DDF1EB\", \"eCore_Confident_Gray\" = \"#CFCFCF\", \"eCore_Growth_Green\" = \"#E7F1BD\")   ),   \"USG-eMajor\" = list(     \"Official Colors\" = c(\"eMajor_Navy\" = \"#0D4860\", \"eMajor_Callout_Navy\" = \"#122550\", \"eMajor_Gray\" = \"#54554C\", \"eMajor_Teal\" = \"#38A3B1\"),     \"Secondary Colors\" = c(\"eMajor_Transcript_Review_Teal\" = \"#0F7F86\", \"eMajor_Ready_for_Graduation\" = \"#AA1E23\", \"eMajor_Pedagogy_Purple\" = \"#8F3776\", \"eMajor_Leadership_Lavender\" = \"#776780\", \"eMajor_Collaborative_Teal\" = \"#5EAFB4\"),     \"Neutrals\" = c(\"eMajor_Grateful_Gray\" = \"#848484\", \"eCore_Balanced_Blue\" = \"#DDF1EB\", \"eMajor_Oats_of_Opportunity\" = \"#C4B5AB\")   ),   \"USG-freeCampus\" = list(     \"Official Colors\" = c(\"FreeCampus_Teal\" = \"#0F7F86\", \"FreeCampus_Red\" = \"#A22422\", \"FreeCampus_Dark_Teal\" = \"#004F51\"),     \"Neutrals\" = c(\"FreeCampus_Grateful_Gray\" = \"#848484\", \"FreeCampus_Balanced_Blue\" = \"#DDF1EB\", \"FreeCampus_Oats_of_Opportunity\" = \"#C4B5AB\")   ),   \"USG-eCampus\" = list(     \"Official Colors\" = c(\"eCampus_Teal\" = \"#6DC4B5\", \"eCampus_Red\" = \"#CA202A\", \"eCampus_Callout_Teal\" = \"#0F7F86\", \"eCampus_Callout_Red\" = \"#A22422\"),     \"Secondary Colors\" = c(\"eCampus_Bright_Future_Yellow\" = \"#EBC647\", \"eCampus_Online-Learning_Orange\" = \"#E87600\", \"eCampus_Study_Group_Gray\" = \"#898989\", \"eCampus_Pedadogy_Purple\" = \"#662362\"),     \"Neutrals\" = c(\"eCampus_Grateful_Gray\" = \"#848484\", \"eCampus_Balanced_Blue\" = \"#DDF1EB\", \"eCampus_Oats_of_Opportunity\" = \"#C4B5AB\")   ) ) # Function to generate palette table data get_palette_data <- function() {   palette_list <- lapply(names(ecampus_palette), function(branch) {     lapply(names(ecampus_palette[[branch]]), function(type) {       colors <- ecampus_palette[[branch]][[type]]       data.frame(         Branch = branch,         Type = type,         Color = names(colors),         Hex = unname(colors),         stringsAsFactors = FALSE       )     })    })      do.call(rbind, unlist(palette_list, recursive = FALSE)) }  # Combine the data for all branches and types palette_data <- get_palette_data() # Add Swatch column for color visualization palette_data <- palette_data %>%   mutate(Swatch = paste0('<div style=\"width: 50px; height: 20px; background-color:', Hex, ';\"><\/div>'))  # Display using DT datatable(   palette_data,    escape = FALSE,    rownames = FALSE,   options = list(     dom = 't',      pageLength = -1  # Set to -1 to display all rows   ) )  # save as html #htmlwidgets::saveWidget(color_table, file=\"color_table.html\", selfcontained = TRUE)"},{"path":"/articles/README.html","id":"palettes","dir":"Articles","previous_headings":"eCampus","what":"Palettes","title":"eCampus Colors Guide","text":"interact color palettes, can visualize stacked bar plot hover text showing color name hex code.can view interactive eCampus Colors : examples eCampus palette credits [Learn UI Design] (https://www.learnui.design/tools/data-color-picker.html). code reproduce palette :","code":"# Create a stacked bar plot with custom hover text stacked_plot <- ggplot(palette_data, aes(x = Branch, fill = Color)) +   geom_bar(position = \"stack\", aes(text = paste(\"Branch: \", Branch, \"<br>Color: \", Color, \"<br>Hex: \", Hex))) +   scale_fill_manual(values = setNames(palette_data$Hex, palette_data$Color)) +   theme_minimal() +   theme(panel.grid = element_blank(),         axis.text.x = element_text(angle = 0, hjust = 0, vjust=0),         legend.position = \"none\") +   labs(title = \"Color Palette for eCampus\")  # Convert to an interactive plot with plotly, specifying the hover text interactive_plot <- ggplotly(stacked_plot, tooltip = \"text\")%>%   layout(     xaxis = list(title = \"\"),     yaxis= list(showticklabels = FALSE,title=\"\"))  # Print the interactive plot interactive_plot  # Save as html #htmlwidgets::saveWidget(interactive_plot, \"ref_plt.html\", selfcontained = TRUE)"},{"path":"/articles/README.html","id":"package-functions","dir":"Articles","previous_headings":"eCampus","what":"Package Functions","title":"eCampus Colors Guide","text":"eCampus package includes several functions work color palettes. full function definitions can found R folder package. examples use functions: get_ecampus_colors(): Retrieves color values given color names. eCampus_theme(): Applies custom theme ggplot2 plots. scale_color_usg(): Creates color scale ggplot2 based eCampus palettes. scale_fill_usg(): Creates fill scale ggplot2 based eCampus palettes.","code":"# Example usage library(eCampus) colors <- get_ecampus_colors(\"eCore_Green\", \"eMajor_Navy\") print(colors) # Example usage library(eCampus) library(ggplot2) ggplot(data, aes(x, y)) +   geom_point() +   eCampus_theme() # Example usage library(eCampus) library(ggplot2) ggplot(data, aes(x, y, color = category)) +   geom_point() +   scale_color_usg(branch = \"USG-eCore\", type = \"Official Colors\") # Example usage library(eCampus) library(ggplot2) ggplot(data, aes(x, fill = category)) +   geom_bar() +   scale_fill_usg(branch = \"USG-eCore\", type = \"Official Colors\")"},{"path":"/articles/README.html","id":"usg-institutions","dir":"Articles","previous_headings":"eCampus","what":"USG Institutions","title":"eCampus Colors Guide","text":"USG Institutions Map shows USG institutions Georgia colored system institutions plotted points. map uses random categorical variable color counties manual color palette five systems. institutions colored based system affiliation. map interactive, allowing users hover points information. examples eCampus palette credits [Learn UI Design] (https://www.learnui.design/tools/data-color-picker.html). code reproduce map :","code":"# Load county map data for Georgia ga_counties <- map_data(\"county\") %>% filter(region == \"georgia\")  # Create a random categorical variable for coloring set.seed(123)  # Ensures consistent random colors unique_counties <- unique(ga_counties$subregion) color_categories <- sample(c(\"A\", \"B\", \"C\", \"D\", \"E\"), length(unique_counties), replace = TRUE) county_colors <- data.frame(subregion = unique_counties, category = color_categories)  # Merge color categories with map data ga_counties <- ga_counties %>%   left_join(county_colors, by = \"subregion\")  # Connect to the database and fetch institution data con <- DBI::dbConnect(odbc::odbc(), \"sqlserver-ecampus\") sql_query <- \"SELECT Institution, IntitutionLatitude, InstitutionLongitude, System FROM [eCampus].[dbo].[ref.Institutions]\" institutions <- DBI::dbGetQuery(con, sql_query) DBI::dbDisconnect(con)  # Ensure latitude and longitude are numeric institutions <- institutions %>%   mutate(     IntitutionLatitude = as.numeric(IntitutionLatitude),     InstitutionLongitude = as.numeric(InstitutionLongitude)   )  # Remove rows with missing latitude or longitude institutions <- institutions %>%   filter(!is.na(IntitutionLatitude) & !is.na(InstitutionLongitude))  # Define color palette for the five systems color_palette <- c(   \"USG\" = \"#0D4860\",       # Dark Blue   \"USG-CE\" = \"#F6931E\",    # Orange   \"TCSG\" = \"#8F3776\",      # Purple   \"TCSG-CE\" = \"#03A59D\",   # Teal   \"Private\" = \"#EBC647\"    # Yellow )  # Create static map with counties colored and institutions as points create_static_map <- function(county_data, institution_data, color_palette) {   ggplot() +     # Color counties by the random categorical variable     geom_polygon(data = county_data, aes(x = long, y = lat, group = group, fill = category), color = \"white\", size = 0.2) +     scale_fill_manual(values = c(\"A\" = \"#0D4860\", \"B\" = \"#F6931E\", \"C\" = \"#8F3776\", \"D\" = \"#03A59D\", \"E\" = \"#EBC647\")) +          # Plot the institution points on top of the counties     geom_point(data = institution_data, aes(x = InstitutionLongitude, y = IntitutionLatitude, color = System, text = paste(\"Institution: \", Institution, \"<br>System: \", System)), size = 2) +     scale_color_manual(values = color_palette) +          # Customize the map appearance     coord_map() +     theme_void() +     theme(legend.position = \"none\") +     labs(title = \"Georgia Institutions by System with County\") }  # Generate the static map with counties and institutions usg_map <- create_static_map(ga_counties, institutions, color_palette)  # Make the map interactive and show tooltips ggplotly(usg_map, tooltip = \"text\")  # Save as html #htmlwidgets::saveWidget(ggplotly(usg_map, tooltip = \"text\"), \"usg_map.html\", selfcontained = TRUE)"},{"path":"/articles/README.html","id":"ecampus-hues","dir":"Articles","previous_headings":"eCampus","what":"eCampus Hues","title":"eCampus Colors Guide","text":"eCampus Hues collection colors can used create visually appealing harmonious color schemes. range hues using eCampus palette colors : examples eCampus palette credits [Learn UI Design] (https://www.learnui.design/tools/data-color-picker.html). code reproduce palette range hues :","code":"# Function to extract all colors from ecampus_palettes extract_colors <- function(palettes) {   colors <- unlist(lapply(palettes, function(branch) {     unlist(lapply(branch, function(type) {       unname(type)     }))   }))   return(unique(colors))  # Return only unique colors }  # Extract colors all_colors <- extract_colors(ecampus_palette)  # Manual color grouping based on the image manual_color_groups <- list(   \"Blue\" = c(\"#0D4860\",\"#21387D\",\"#0F7F86\", \"#38A3B1\",\"#4CC2C5\"),   \"Cyan\" = c(\"#5EAFB4\", \"#03A59D\", \"#00A9A6\",\"#6DC4B5\", \"#B4E8E5\", \"#DDF1EB\"),   \"Gray\" = c(\"#54554C\", \"#848484\", \"#CFCFCF\",\"#C4B5AB\"),   \"Green\" = c(\"#004F51\",\"#7BA640\", \"#7DAA45\",\"#C9D57F\"),   \"Magenta\" = c( \"#662362\",\"#8F3776\", \"#776780\"),   \"Red\" = c(\"#AA1E23\", \"#A22422\", \"#CA2027\",\"#CA202A\"),   \"Yellow\" = c(\"#F6931E\", \"#E87600\", \"#EBC647\",\"#E7F1BD\") )  # Get luminance of each color get_luminance <- function(hex) {   rgb <- col2rgb(hex) / 255   0.2126 * rgb[1, ] + 0.7152 * rgb[2, ] + 0.0722 * rgb[3, ] }  # Rebuild dataframe with luminance and stack rank data <- do.call(rbind, lapply(names(manual_color_groups), function(group) {   colors <- manual_color_groups[[group]]   luminance <- get_luminance(colors)   df <- data.frame(     Group = group,     Color = colors,     Luminance = luminance,     stringsAsFactors = FALSE   )   df <- df[order(df$Luminance), ]  # darkest (low luminance) first   df$Rank <- rev(seq_len(nrow(df)))  # stack from bottom up   df }))  data$Group <- factor(data$Group, levels = c(\"Blue\", \"Cyan\", \"Gray\", \"Green\", \"Magenta\", \"Red\", \"Yellow\"))  # Plot with geom_col and y = 1, position = \"stack\" p <- ggplot(data, aes(x = Group, y = 1, fill = Color, text = paste(\"Color:\", Color))) +   geom_col(position = position_stack(reverse = TRUE), width = 0.9, color = NA) +   scale_fill_identity() +   theme_minimal() +   labs(title = \"Palette Colors from Dark to Light (Bottom to Top)\",        x = NULL, y = NULL) +   theme(axis.text.x = element_text(angle = 0, hjust = 1),         panel.grid = element_blank(),         axis.ticks = element_blank(),         axis.text.y = element_blank(),         legend.position = \"none\")  # Convert to interactive plotly plot pp <- plotly::ggplotly(p, tooltip = \"text\")   # save as html #htmlwidgets::saveWidget(pp, \"ecampus_hues.html\", selfcontained = TRUE)"},{"path":"/articles/README.html","id":"ecampus-enhanced-gradient-generator","dir":"Articles","previous_headings":"eCampus","what":"eCampus Enhanced Gradient Generator","title":"eCampus Colors Guide","text":"eCampus Enhanced Gradient Generator Shiny application allows users create visualize gradients eCampus color palette. app allows : - Generate gradients using eCampus color palettes. - Export gradients CSS, URL, SVG. - Visualize color combinations interactively.  examples eCampus palette credits [Learn UI Design] (https://www.learnui.design/tools/gradient-generator.html). run app locally, use following command: code reproduce eCampus Enhanced Gradient Generator:","code":"# install shiny and shinyjs if not already installed # install.packages(\"shiny\") # install.packages(\"shinyjs\") # Run the app shiny::runGitHub(\"eCampusGradient\", \"LadyArnitah\") # UI ui <- fluidPage(   titlePanel(\"eCampus Enhanced Gradient Generator\"),   useShinyjs(),    sidebarLayout(     sidebarPanel(       selectInput(\"palette\", \"Choose a Palette:\", choices = names(ecampus_palette)),       uiOutput(\"category_ui\"),       uiOutput(\"colors_ui\"),        selectInput(\"gradient_type\", \"Gradient Type:\", choices = c(\"Linear\", \"Radial\", \"Conic\", \"Linear-Repeating\", \"Radial-Repeating\", \"Conic-Repeating\")),        sliderInput(\"angle\", \"Gradient Angle:\", min = 0, max = 360, value = 0, step = 5),       selectInput(\"direction\", \"Interpolation Direction:\", choices = c(\"To Right\", \"To Left\", \"To Top\", \"To Bottom\")),       sliderInput(\"precision\", \"Gradient Precision:\", min = 10, max = 200, value = 100),        selectInput(\"interpolation_type\", \"Interpolation Type:\", choices = c(\"RGB Blend\", \"Perceptual HCL\", \"Smooth Interpolation\")),       selectInput(\"ease_function\", \"Ease Function:\", choices = c(\"Linear\", \"Ease-In\", \"Ease-Out\")),        downloadButton(\"download_gradient\", \"Export Gradient as CSS\"),       actionButton(\"copy_css\", \"Copy CSS\"),       actionButton(\"copy_url\", \"Copy URL Gradient\"),       downloadButton(\"download_svg\", \"Export as SVG\")     ),      mainPanel(       div(id = \"preview_element\", style = \"width:100%;height:300px;\"),       textOutput(\"gradient_css\"),       plotlyOutput(\"gradient_plot\")     )   ) )  # Server logic server <- function(input, output, session) {    output$category_ui <- renderUI({     req(input$palette)     selectInput(\"category\", \"Choose a Category:\", choices = names(ecampus_palette[[input$palette]]))   })    output$colors_ui <- renderUI({     req(input$palette, input$category)     selectizeInput(\"selected_colors\", \"Select Colors:\",                    choices = ecampus_palette[[input$palette]][[input$category]],                    multiple = TRUE, options = list(maxItems = 5))   })    gradient_css <- reactiveVal(\"\")    observe({     req(input$selected_colors)      colors <- paste(input$selected_colors, collapse = \", \")     direction <- switch(input$direction,                         \"To Right\" = \"to right\",                         \"To Left\" = \"to left\",                         \"To Top\" = \"to top\",                         \"To Bottom\" = \"to bottom\")      angle <- paste0(input$angle, \"deg\")      css_gradient <- switch(input$gradient_type,                            \"Linear\" = paste0(\"linear-gradient(\", angle, \", \", colors, \")\"),                            \"Radial\" = paste0(\"radial-gradient(circle, \", colors, \")\"),                            \"Conic\" = paste0(\"conic-gradient(\", colors, \")\"),                            \"Linear-Repeating\" = paste0(\"repeating-linear-gradient(\", angle, \", \", colors, \")\"),                            \"Radial-Repeating\" = paste0(\"repeating-radial-gradient(circle, \", colors, \")\"),                            \"Conic-Repeating\" = paste0(\"repeating-conic-gradient(\", colors, \")\"))      gradient_css(css_gradient)   })    observeEvent(gradient_css(), {     shinyjs::runjs(sprintf(       'document.getElementById(\"preview_element\").style.backgroundImage = \"%s\";',       gradient_css()     ))   })    output$gradient_css <- renderText({     paste(\"CSS Gradient:\", gradient_css())   })    output$download_gradient <- downloadHandler(     filename = function() {       paste(\"gradient-\", Sys.Date(), \".css\", sep = \"\")     },      content = function(file) {       req(input$selected_colors)       css_gradient <- gradient_css()       writeLines(css_gradient, file)     }   )    observeEvent(input$copy_css, {     runjs(sprintf(       \"navigator.clipboard.writeText(`%s`).then(() => {        Shiny.setInputValue('copy_success', 'css', {priority: 'event'});      }).catch(err => {        Shiny.setInputValue('copy_failure', 'css', {priority: 'event'});      });\",       gradient_css()     ))   })     observeEvent(input$copy_url, {     req(input$selected_colors)     url_gradient <- paste0(       \"https://example.com/gradient?colors=\",       URLencode(paste(input$selected_colors, collapse = \",\"))     )      runjs(sprintf(       \"navigator.clipboard.writeText(`%s`).then(() => {        Shiny.setInputValue('copy_success', 'url', {priority: 'event'});      }).catch(err => {        Shiny.setInputValue('copy_failure', 'url', {priority: 'event'});      });\",       url_gradient     ))   })     output$download_svg <- downloadHandler(     filename = \"gradient.svg\",     content = function(file) {       req(input$selected_colors)       svg_content <- paste(         '<svg width=\"100%\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\">',         '<defs>',         '<linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">',         paste0('<stop offset=\"0%\" style=\"stop-color:', input$selected_colors[1], ';stop-opacity:1\" />'),         paste0('<stop offset=\"100%\" style=\"stop-color:', input$selected_colors[length(input$selected_colors)], ';stop-opacity:1\" />'),         '<\/linearGradient>',         '<\/defs>',         '<rect width=\"100%\" height=\"100\" fill=\"url(#grad1)\" />',         '<\/svg>'       )       writeLines(svg_content, file)     }   )    output$gradient_plot <- renderPlotly({     req(input$selected_colors)      colors <- input$selected_colors     if (length(colors) < 2) {       showNotification(\"Select at least 2 colors to generate a gradient.\", type = \"error\")       return(NULL)     }      precision <- input$precision     gradient_colors <- switch(input$interpolation_type,                               \"RGB Blend\" = colorRampPalette(colors, space = \"rgb\")(precision),                               \"Perceptual HCL\" = {                                 rgb_colors <- col2rgb(colors) / 255                                 hcl_colors <- as(colorspace::RGB(t(rgb_colors)), \"polarLUV\")                                 sequential_hcl(                                   n = precision,                                   h = mean(hcl_colors@coords[, \"H\"], na.rm = TRUE),                                   c = mean(hcl_colors@coords[, \"C\"], na.rm = TRUE),                                   l = seq(min(hcl_colors@coords[, \"L\"], na.rm = TRUE), max(hcl_colors@coords[, \"L\"], na.rm = TRUE), length.out = precision)                                 )                               },                               \"Smooth Interpolation\" = {                                 smooth_palette <- colorRampPalette(colors)                                 smooth_palette(precision)                               }     )      df <- data.frame(x = 1:precision, y = rep(1, precision), color = gradient_colors)      p <- ggplot(df, aes(x = x, y = y, fill = color, text = paste(\"Color: \", color))) +       geom_tile(color = NA) +       scale_fill_identity() +       theme_void() +       theme(panel.grid = element_blank(),             legend.position = \"none\",             plot.margin = margin(0, 0, 0, 0, \"cm\"),             panel.border = element_blank()) +       labs(title = paste(\"Gradient Method:\", input$gradient_type))      ggplotly(p, tooltip = \"text\") %>%       layout(showlegend = FALSE) %>%       config(displayModeBar = FALSE)   }) }  # Run the app shinyApp(ui, server)"},{"path":"/articles/README.html","id":"notes","dir":"Articles","previous_headings":"eCampus","what":"Notes","title":"eCampus Colors Guide","text":"eCampus package designed user-friendly provides variety functions work color palettes. package open-source contributions welcome.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Enita Omuvwie. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Omuvwie E (2025). eCampus: Package (One Line, Title Case). R package version 0.0.0.9000, https://github.com/LadyArnitah/eCampus.","code":"@Manual{,   title = {eCampus: What the Package Does (One Line, Title Case)},   author = {Enita Omuvwie},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/LadyArnitah/eCampus}, }"},{"path":"/reference/eCampus_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"eCampus Thematic ggplot2 Theme — eCampus_theme","title":"eCampus Thematic ggplot2 Theme — eCampus_theme","text":"function defines custom ggplot2 theme clean structured appearance, designed eCampus-related visualizations. applies minimal theme specific color text settings consistency.","code":""},{"path":"/reference/eCampus_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"eCampus Thematic ggplot2 Theme — eCampus_theme","text":"","code":"eCampus_theme(base_size = 14, base_family = \"Arial\")"},{"path":"/reference/eCampus_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"eCampus Thematic ggplot2 Theme — eCampus_theme","text":"base_size Numeric. Base font size text elements. Default 14. base_family Character. Base font family text elements. Default \"Arial\".","code":""},{"path":"/reference/eCampus_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"eCampus Thematic ggplot2 Theme — eCampus_theme","text":"ggplot2 theme object customized elements including titles, axis text, legend styles, background settings.","code":""},{"path":"/reference/eCampus_theme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"eCampus Thematic ggplot2 Theme — eCampus_theme","text":"theme applies: centered, bold plot title deep blue (#003366). Italicized axis titles deep blue (#003366). Black axis text. Light gray (#f0f0f0) panel background. Grid lines soft gray shades. neatly formatted legend white background. Bottom-aligned legend positioning. Well-defined facet labels (strip text). Black axis lines panel borders. white overall plot background.","code":""},{"path":"/reference/eCampus_theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"eCampus Thematic ggplot2 Theme — eCampus_theme","text":"","code":"library(ggplot2) ggplot(mtcars, aes(x = wt, y = mpg)) +   geom_point() +   eCampus_theme()"},{"path":"/reference/ecampus_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"ECampus Color Palettes — ecampus_palettes","title":"ECampus Color Palettes — ecampus_palettes","text":"collection color palettes used various ECampus branches.","code":""},{"path":"/reference/ecampus_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ECampus Color Palettes — ecampus_palettes","text":"","code":"ecampus_palettes"},{"path":"/reference/ecampus_palettes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ECampus Color Palettes — ecampus_palettes","text":"nested list named color palettes: USG-eCore list official, secondary, neutral colors USG-eCore branch. USG-eMajor list official, secondary, neutral colors USG-eMajor branch. USG-freeCampus list official neutral colors USG-freeCampus branch. USG-eCampus list official, secondary, neutral colors USG-eCampus branch.","code":""},{"path":"/reference/ecampus_palettes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ECampus Color Palettes — ecampus_palettes","text":"Derived internal ECampus branding guidelines.","code":""},{"path":"/reference/ecampus_palettes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ECampus Color Palettes — ecampus_palettes","text":"dataset contains predefined colors categorized official, secondary, neutral colors different ECampus branches. color palettes structured provide consistent visual identity branch ECampus.","code":""},{"path":"/reference/get_ecampus_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ECampus Colors by Name — get_ecampus_colors","title":"Get ECampus Colors by Name — get_ecampus_colors","text":"function retrieves one color hex codes ecampus_palettes dataset.","code":""},{"path":"/reference/get_ecampus_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ECampus Colors by Name — get_ecampus_colors","text":"","code":"get_ecampus_colors(...)"},{"path":"/reference/get_ecampus_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ECampus Colors by Name — get_ecampus_colors","text":"... One color names character strings.","code":""},{"path":"/reference/get_ecampus_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ECampus Colors by Name — get_ecampus_colors","text":"named vector hex codes requested colors.","code":""},{"path":"/reference/get_ecampus_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ECampus Colors by Name — get_ecampus_colors","text":"","code":"get_ecampus_colors(c(\"eCore_Green\", \"eCore_Teal\")) #> eCore_Green  eCore_Teal  #>   \"#7BA640\"   \"#00A9A6\"  get_ecampus_colors(\"eCore_OER_Orange\", palette = \"USG-eCore\") #> Warning: Color 'USG-eCore' not found in ecampus_palettes. #> eCore_OER_Orange        USG-eCore  #>        \"#F6931E\"               \"\"  get_ecampus_colors(\"eMajor_Navy\", palette = \"all\") # Search in all branches #> Warning: Color 'all' not found in ecampus_palettes. #> eMajor_Navy         all  #>   \"#0D4860\"          \"\""},{"path":"/reference/scale_color_usg.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom Color Scale for eCampus Data — scale_color_usg","title":"Custom Color Scale for eCampus Data — scale_color_usg","text":"function provides custom discrete color scale ggplot2 visualizations, using predefined color palettes stored ecampus_palettes. allows users specify branch, color type, optionally reverse color order.","code":""},{"path":"/reference/scale_color_usg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom Color Scale for eCampus Data — scale_color_usg","text":"","code":"scale_color_usg(   branch = \"USG-eCore\",   type = \"Official Colors\",   reverse = FALSE,   ... )"},{"path":"/reference/scale_color_usg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom Color Scale for eCampus Data — scale_color_usg","text":"branch Character. eCampus branch retrieve colors . Default \"USG-eCore\". type Character. type colors use within selected branch. Default \"Official Colors\". reverse Logical. TRUE, order colors reversed. Default FALSE. ... Additional arguments passed scale_color_manual().","code":""},{"path":"/reference/scale_color_usg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom Color Scale for eCampus Data — scale_color_usg","text":"function , applied ggplot object, maps categorical variables colors selected eCampus palette.","code":""},{"path":"/reference/scale_color_usg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Custom Color Scale for eCampus Data — scale_color_usg","text":"function: Extracts specified color set ecampus_palettes. Assigns colors unique categorical levels data. Issues warning categories available colors, recycling colors necessary. Returns scale_color_manual() function applies selected colors.","code":""},{"path":"/reference/scale_color_usg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom Color Scale for eCampus Data — scale_color_usg","text":"","code":"if (FALSE) { # \\dontrun{ # Example dataset library(ggplot2) df <- data.frame(   category = rep(c(\"A\", \"B\", \"C\", \"D\"), each = 5),   x = rnorm(20),   y = rnorm(20) )  # Apply the custom scale to a ggplot ggplot(df, aes(x = x, y = y, color = category)) +   geom_point(size = 4) +   scale_color_usg(branch = \"USG-eCore\", type = \"Official Colors\", reverse = TRUE)(df) +   theme_minimal() +   labs(title = \"Custom Color Scale Example (Discrete)\") } # }"},{"path":"/reference/scale_fill_usg.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom Fill Scale for USG eCampus Palettes — scale_fill_usg","title":"Custom Fill Scale for USG eCampus Palettes — scale_fill_usg","text":"function applies custom fill scale using predefined color palettes ecampus_palettes. supports discrete continuous data, automatically determining appropriate scale.","code":""},{"path":"/reference/scale_fill_usg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom Fill Scale for USG eCampus Palettes — scale_fill_usg","text":"","code":"scale_fill_usg(   branch = \"USG-eCore\",   type = \"Official Colors\",   data,   reverse = FALSE,   ... )"},{"path":"/reference/scale_fill_usg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom Fill Scale for USG eCampus Palettes — scale_fill_usg","text":"branch branch name. Default \"USG-eCore\". type type palette. Default \"Official Colors\". data data used mapping colors. Can factor, character, numeric. reverse Logical, color order reversed? Default FALSE. ... Additional arguments passed scale_fill_manual scale_fill_gradientn.","code":""},{"path":"/reference/scale_fill_usg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom Fill Scale for USG eCampus Palettes — scale_fill_usg","text":"ggplot2 scale object, either scale_fill_manual() (discrete data) scale_fill_gradientn() (continuous data).","code":""},{"path":"/reference/scale_fill_usg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom Fill Scale for USG eCampus Palettes — scale_fill_usg","text":"","code":"if (FALSE) { # \\dontrun{ # Example for discrete data df_discrete <- data.frame(   category = c(\"A\", \"B\", \"C\", \"D\"),   value = c(10, 15, 7, 12) ) ggplot(df_discrete, aes(x = category, y = value, fill = category)) +   geom_bar(stat = \"identity\") +   scale_fill_usg(branch = \"USG-eCore\", type = \"Official Colors\", data = df_discrete$category) +   theme_minimal()  # Example for continuous data df_continuous <- data.frame(   x = 1:10,   y = 1:10,   z = rnorm(10) ) ggplot(df_continuous, aes(x = x, y = y, fill = z)) +   geom_tile() +   scale_fill_usg(branch = \"USG-eCore\", type = \"Official Colors\", data = df_continuous$z) +   theme_minimal() } # }"}]
