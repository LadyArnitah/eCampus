"USG" = "#21387D",       # Dark Blue
"USG-CE" = "#F6931E",    # Orange
"TCSG" = "#8F3776",      # Purple
"TCSG-CE" = "#03A59D",   # Teal
"Private" = "#EBC647"    # Yellow
)
# Create static map with counties colored and institutions as points
create_static_map <- function(county_data, institution_data, color_palette) {
ggplot() +
# Color counties by the random categorical variable
geom_polygon(data = county_data, aes(x = long, y = lat, group = group, fill = category), color = "white", size = 0.2) +
scale_fill_manual(values = c("A" = "#21387D", "B" = "#F6931E", "C" = "#8F3776", "D" = "#03A59D", "E" = "#EBC647")) +
# Plot the institution points on top of the counties
geom_point(data = institution_data, aes(x = InstitutionLongitude, y = IntitutionLatitude, color = System, text = paste("Institution: ", Institution, "<br>System: ", System)), size = 2) +
scale_color_manual(values = color_palette) +
# Customize the map appearance
coord_map() +
theme_void() +
theme(legend.position = "none") +
labs(title = "Georgia Institutions by System with County Coloring")
}
# Generate the static map with counties and institutions
usg_map <- create_static_map(ga_counties, institutions, color_palette)
# Load necessary libraries
library(DBI)
library(odbc)
library(ggplot2)
library(dplyr)
library(maps)
library(plotly)  # Make sure plotly is loaded
# Load county map data for Georgia
ga_counties <- map_data("county") %>% filter(region == "georgia")
# Create a random categorical variable for coloring
set.seed(123)  # Ensures consistent random colors
unique_counties <- unique(ga_counties$subregion)
color_categories <- sample(c("A", "B", "C", "D", "E"), length(unique_counties), replace = TRUE)
county_colors <- data.frame(subregion = unique_counties, category = color_categories)
# Merge color categories with map data
ga_counties <- ga_counties %>%
left_join(county_colors, by = "subregion")
# Connect to the database and fetch institution data
con <- DBI::dbConnect(odbc::odbc(), "sqlserver-ecampus")
sql_query <- "SELECT Institution, IntitutionLatitude, InstitutionLongitude, System FROM [eCampus].[dbo].[ref.Institutions]"
institutions <- DBI::dbGetQuery(con, sql_query)
DBI::dbDisconnect(con)
# Ensure latitude and longitude are numeric
institutions <- institutions %>%
mutate(
IntitutionLatitude = as.numeric(IntitutionLatitude),
InstitutionLongitude = as.numeric(InstitutionLongitude)
)
# Remove rows with missing latitude or longitude
institutions <- institutions %>%
filter(!is.na(IntitutionLatitude) & !is.na(InstitutionLongitude))
# Define color palette for the five systems
color_palette <- c(
"USG" = "#21387D",       # Dark Blue
"USG-CE" = "#F6931E",    # Orange
"TCSG" = "#8F3776",      # Purple
"TCSG-CE" = "#03A59D",   # Teal
"Private" = "#EBC647"    # Yellow
)
# Create static map with counties colored and institutions as points
create_static_map <- function(county_data, institution_data, color_palette) {
ggplot() +
# Color counties by the random categorical variable
geom_polygon(data = county_data, aes(x = long, y = lat, group = group, fill = category), color = "white", size = 0.2) +
scale_fill_manual(values = c("A" = "#21387D", "B" = "#F6931E", "C" = "#8F3776", "D" = "#03A59D", "E" = "#EBC647")) +
# Plot the institution points on top of the counties
geom_point(data = institution_data, aes(x = InstitutionLongitude, y = IntitutionLatitude, color = System, text = paste("Institution: ", Institution, "<br>System: ", System)), size = 2) +
scale_color_manual(values = color_palette) +
# Customize the map appearance
coord_map() +
theme_void() +
theme(legend.position = "none") +
labs(title = "Georgia Institutions by System with County Coloring")
}
# Generate the static map with counties and institutions
usg_map <- create_static_map(ga_counties, institutions, color_palette)
# Make the map interactive and show tooltips
ggplotly(usg_map, tooltip = "text")
# Load necessary libraries
library(DBI)
library(odbc)
library(ggplot2)
library(dplyr)
library(maps)
library(plotly)
library(eCampus)
# Load county map data for Georgia
ga_counties <- map_data("county") %>% filter(region == "georgia")
# Create a random categorical variable for coloring
set.seed(123)  # Ensures consistent random colors
unique_counties <- unique(ga_counties$subregion)
color_categories <- sample(c("A", "B", "C", "D", "E"), length(unique_counties), replace = TRUE)
county_colors <- data.frame(subregion = unique_counties, category = color_categories)
# Merge color categories with map data
ga_counties <- ga_counties %>%
left_join(county_colors, by = "subregion")
# Connect to the database and fetch institution data
con <- DBI::dbConnect(odbc::odbc(), "sqlserver-ecampus")
sql_query <- "SELECT Institution, IntitutionLatitude, InstitutionLongitude, System FROM [eCampus].[dbo].[ref.Institutions]"
institutions <- DBI::dbGetQuery(con, sql_query)
DBI::dbDisconnect(con)
# Ensure latitude and longitude are numeric
institutions <- institutions %>%
mutate(
IntitutionLatitude = as.numeric(IntitutionLatitude),
InstitutionLongitude = as.numeric(InstitutionLongitude)
)
# Remove rows with missing latitude or longitude
institutions <- institutions %>%
filter(!is.na(IntitutionLatitude) & !is.na(InstitutionLongitude))
# Define color palette for the five systems
color_palette <- c(
"USG" = get_ecampus_colors("eMajor_Callout_Navy"),       # Dark Blue
"USG-CE" = get_ecampus_colors("eCampus_Online-Learning_Orange"),    # Orange
"TCSG" = get_ecampus_colors("eCore_Professor_Plum"),      # Purple
"TCSG-CE" = get_ecampus_colors("FreeCampus_Teal"),   # Teal
"Private" = get_ecampus_colors("eCampus_Bright_Future_Yellow")    # Yellow
)
# Create static map with counties colored and institutions as points
create_static_map <- function(county_data, institution_data, color_palette) {
ggplot() +
# Color counties by the random categorical variable
geom_polygon(data = county_data, aes(x = long, y = lat, group = group, fill = category), color = "white", size = 0.2) +
scale_fill_manual(values = c("A" = get_ecampus_colors("eMajor_Callout_Navy"), "B" = get_ecampus_colors("eCampus_Online-Learning_Orange"), "C" = get_ecampus_colors("eCore_Professor_Plum"), "D" = get_ecampus_colors("FreeCampus_Teal"), "E" = get_ecampus_colors("eCampus_Bright_Future_Yellow"))) +
# Plot the institution points on top of the counties
geom_point(data = institution_data, aes(x = InstitutionLongitude, y = IntitutionLatitude, color = System, text = paste("Institution: ", Institution, "<br>System: ", System)), size = 2) +
scale_color_manual(values = color_palette) +
# Customize the map appearance
coord_map() +
theme_void() +
theme(legend.position = "none") +
labs(title = "Georgia Institutions by System with County Coloring")
}
# Generate the static map with counties and institutions
usg_map <- create_static_map(ga_counties, institutions, color_palette)
# Make the map interactive and show tooltips
ggplotly(usg_map, tooltip = "text")
?ecampus_palettes
# Load necessary libraries
library(DBI)
library(odbc)
library(ggplot2)
library(dplyr)
library(maps)
library(plotly)
library(eCampus)
# Load county map data for Georgia
ga_counties <- map_data("county") %>% filter(region == "georgia")
# Create a random categorical variable for coloring
set.seed(123)  # Ensures consistent random colors
unique_counties <- unique(ga_counties$subregion)
color_categories <- sample(c("A", "B", "C", "D", "E"), length(unique_counties), replace = TRUE)
county_colors <- data.frame(subregion = unique_counties, category = color_categories)
# Merge color categories with map data
ga_counties <- ga_counties %>%
left_join(county_colors, by = "subregion")
# Connect to the database and fetch institution data
con <- DBI::dbConnect(odbc::odbc(), "sqlserver-ecampus")
sql_query <- "SELECT Institution, IntitutionLatitude, InstitutionLongitude, System FROM [eCampus].[dbo].[ref.Institutions]"
institutions <- DBI::dbGetQuery(con, sql_query)
DBI::dbDisconnect(con)
# Ensure latitude and longitude are numeric
institutions <- institutions %>%
mutate(
IntitutionLatitude = as.numeric(IntitutionLatitude),
InstitutionLongitude = as.numeric(InstitutionLongitude)
)
# Remove rows with missing latitude or longitude
institutions <- institutions %>%
filter(!is.na(IntitutionLatitude) & !is.na(InstitutionLongitude))
# Define color palette for the five systems
color_palette <- c(
"USG" = get_ecampus_colors("eMajor_Callout_Navy"),       # Dark Blue
"USG-CE" = get_ecampus_colors("eCampus_Online-Learning_Orange"),    # Orange
"TCSG" = get_ecampus_colors("eCore_Professor_Plum"),      # Purple
"TCSG-CE" = get_ecampus_colors("FreeCampus_Teal"),   # Teal
"Private" = get_ecampus_colors("eCampus_Bright_Future_Yellow")    # Yellow
)
# Create static map with counties colored and institutions as points
create_static_map <- function(county_data, institution_data, color_palette) {
ggplot() +
# Color counties by the random categorical variable
geom_polygon(data = county_data, aes(x = long, y = lat, group = group, fill = category), color = "white", size = 0.2) +
scale_fill_manual(values = c("A" = get_ecampus_colors("eMajor_Callout_Navy"), "B" = get_ecampus_colors("eCampus_Online-Learning_Orange"), "C" = get_ecampus_colors("eCore_Professor_Plum"), "D" = get_ecampus_colors("FreeCampus_Teal"), "E" = get_ecampus_colors("eCampus_Bright_Future_Yellow"))) +
# Plot the institution points on top of the counties
geom_point(data = institution_data, aes(x = InstitutionLongitude, y = IntitutionLatitude, color = System, text = paste("Institution: ", Institution, "<br>System: ", System)), size = 2) +
scale_color_manual(values = color_palette) +
# Customize the map appearance
coord_map() +
theme_void() +
theme(legend.position = "none") +
labs(title = "Georgia Institutions by System with County Coloring")
}
# Generate the static map with counties and institutions
usg_map <- create_static_map(ga_counties, institutions, color_palette)
# Make the map interactive and show tooltips
ggplotly(usg_map, tooltip = "text")
devtools::document()
# Load necessary libraries
library(DBI)
library(odbc)
library(ggplot2)
library(dplyr)
library(maps)
library(plotly)
# Load county map data for Georgia
ga_counties <- map_data("county") %>% filter(region == "georgia")
# Create a random categorical variable for coloring
set.seed(123)  # Ensures consistent random colors
unique_counties <- unique(ga_counties$subregion)
color_categories <- sample(c("A", "B", "C", "D", "E"), length(unique_counties), replace = TRUE)
county_colors <- data.frame(subregion = unique_counties, category = color_categories)
# Merge color categories with map data
ga_counties <- ga_counties %>%
left_join(county_colors, by = "subregion")
# Connect to the database and fetch institution data
con <- DBI::dbConnect(odbc::odbc(), "sqlserver-ecampus")
sql_query <- "SELECT Institution, IntitutionLatitude, InstitutionLongitude, System FROM [eCampus].[dbo].[ref.Institutions]"
institutions <- DBI::dbGetQuery(con, sql_query)
DBI::dbDisconnect(con)
# Ensure latitude and longitude are numeric
institutions <- institutions %>%
mutate(
IntitutionLatitude = as.numeric(IntitutionLatitude),
InstitutionLongitude = as.numeric(InstitutionLongitude)
)
# Remove rows with missing latitude or longitude
institutions <- institutions %>%
filter(!is.na(IntitutionLatitude) & !is.na(InstitutionLongitude))
# Define color palette for the five systems
color_palette <- c(
"USG" = "#21387D",       # Dark Blue
"USG-CE" = "#F6931E",    # Orange
"TCSG" = "#8F3776",      # Purple
"TCSG-CE" = "#03A59D",   # Teal
"Private" = get_ecampus_colors("eCampus_Bright_Future_Yellow")   # Yellow
)
# Load necessary libraries
library(DBI)
library(odbc)
library(ggplot2)
library(dplyr)
library(maps)
library(plotly)
# Load county map data for Georgia
ga_counties <- map_data("county") %>% filter(region == "georgia")
# Create a random categorical variable for coloring
set.seed(123)  # Ensures consistent random colors
unique_counties <- unique(ga_counties$subregion)
color_categories <- sample(c("A", "B", "C", "D", "E"), length(unique_counties), replace = TRUE)
county_colors <- data.frame(subregion = unique_counties, category = color_categories)
# Merge color categories with map data
ga_counties <- ga_counties %>%
left_join(county_colors, by = "subregion")
# Connect to the database and fetch institution data
con <- DBI::dbConnect(odbc::odbc(), "sqlserver-ecampus")
sql_query <- "SELECT Institution, IntitutionLatitude, InstitutionLongitude, System FROM [eCampus].[dbo].[ref.Institutions]"
institutions <- DBI::dbGetQuery(con, sql_query)
DBI::dbDisconnect(con)
# Ensure latitude and longitude are numeric
institutions <- institutions %>%
mutate(
IntitutionLatitude = as.numeric(IntitutionLatitude),
InstitutionLongitude = as.numeric(InstitutionLongitude)
)
# Remove rows with missing latitude or longitude
institutions <- institutions %>%
filter(!is.na(IntitutionLatitude) & !is.na(InstitutionLongitude))
# Define color palette for the five systems
color_palette <- c(
"USG" = "#0D4860",       # Dark Blue
"USG-CE" = "#F6931E",    # Orange
"TCSG" = "#8F3776",      # Purple
"TCSG-CE" = "#03A59D",   # Teal
"Private" = "#EBC647"    # Yellow
)
# Create static map with counties colored and institutions as points
create_static_map <- function(county_data, institution_data, color_palette) {
ggplot() +
# Color counties by the random categorical variable
geom_polygon(data = county_data, aes(x = long, y = lat, group = group, fill = category), color = "white", size = 0.2) +
scale_fill_manual(values = c("A" = "#0D4860", "B" = "#F6931E", "C" = "#8F3776", "D" = "#03A59D", "E" = "#EBC647")) +
# Plot the institution points on top of the counties
geom_point(data = institution_data, aes(x = InstitutionLongitude, y = IntitutionLatitude, color = System, text = paste("Institution: ", Institution, "<br>System: ", System)), size = 2) +
scale_color_manual(values = color_palette) +
# Customize the map appearance
coord_map() +
theme_void() +
theme(legend.position = "none") +
labs(title = "Georgia Institutions by System with County Coloring")
}
# Generate the static map with counties and institutions
usg_map <- create_static_map(ga_counties, institutions, color_palette)
# Make the map interactive and show tooltips
ggplotly(usg_map, tooltip = "text")
# Load libraries
library(DT)
library(ggplot2)
library(dplyr)
library(plotly)
library(odbc)
library(maps)
# Load county map data for Georgia
ga_counties <- map_data("county") %>% filter(region == "georgia")
# Create a random categorical variable for coloring
set.seed(123)  # Ensures consistent random colors
unique_counties <- unique(ga_counties$subregion)
color_categories <- sample(c("A", "B", "C", "D", "E"), length(unique_counties), replace = TRUE)
county_colors <- data.frame(subregion = unique_counties, category = color_categories)
# Merge color categories with map data
ga_counties <- ga_counties %>%
left_join(county_colors, by = "subregion")
# Connect to the database and fetch institution data
con <- DBI::dbConnect(odbc::odbc(), "sqlserver-ecampus")
sql_query <- "SELECT Institution, IntitutionLatitude, InstitutionLongitude, System FROM [eCampus].[dbo].[ref.Institutions]"
institutions <- DBI::dbGetQuery(con, sql_query)
DBI::dbDisconnect(con)
# Ensure latitude and longitude are numeric
institutions <- institutions %>%
mutate(
IntitutionLatitude = as.numeric(IntitutionLatitude),
InstitutionLongitude = as.numeric(InstitutionLongitude)
)
# Remove rows with missing latitude or longitude
institutions <- institutions %>%
filter(!is.na(IntitutionLatitude) & !is.na(InstitutionLongitude))
# Define color palette for the five systems
color_palette <- c(
"USG" = "#0D4860",       # Dark Blue
"USG-CE" = "#F6931E",    # Orange
"TCSG" = "#8F3776",      # Purple
"TCSG-CE" = "#03A59D",   # Teal
"Private" = "#EBC647"    # Yellow
)
# Create static map with counties colored and institutions as points
create_static_map <- function(county_data, institution_data, color_palette) {
ggplot() +
# Color counties by the random categorical variable
geom_polygon(data = county_data, aes(x = long, y = lat, group = group, fill = category), color = "white", size = 0.2) +
scale_fill_manual(values = c("A" = "#0D4860", "B" = "#F6931E", "C" = "#8F3776", "D" = "#03A59D", "E" = "#EBC647")) +
# Plot the institution points on top of the counties
geom_point(data = institution_data, aes(x = InstitutionLongitude, y = IntitutionLatitude, color = System, text = paste("Institution: ", Institution, "<br>System: ", System)), size = 2) +
scale_color_manual(values = color_palette) +
# Customize the map appearance
coord_map() +
theme_void() +
theme(legend.position = "none") +
labs(title = "Georgia Institutions by System with County Coloring")
}
# Generate the static map with counties and institutions
usg_map <- create_static_map(ga_counties, institutions, color_palette)
# Make the map interactive and show tooltips
ggplotly(usg_map, tooltip = "text")
# Load county map data for Georgia
ga_counties <- map_data("county") %>% filter(region == "georgia")
# Create a random categorical variable for coloring
set.seed(123)  # Ensures consistent random colors
unique_counties <- unique(ga_counties$subregion)
color_categories <- sample(c("A", "B", "C", "D", "E"), length(unique_counties), replace = TRUE)
county_colors <- data.frame(subregion = unique_counties, category = color_categories)
# Merge color categories with map data
ga_counties <- ga_counties %>%
left_join(county_colors, by = "subregion")
# Connect to the database and fetch institution data
con <- DBI::dbConnect(odbc::odbc(), "sqlserver-ecampus")
sql_query <- "SELECT Institution, IntitutionLatitude, InstitutionLongitude, System FROM [eCampus].[dbo].[ref.Institutions]"
institutions <- DBI::dbGetQuery(con, sql_query)
DBI::dbDisconnect(con)
# Ensure latitude and longitude are numeric
institutions <- institutions %>%
mutate(
IntitutionLatitude = as.numeric(IntitutionLatitude),
InstitutionLongitude = as.numeric(InstitutionLongitude)
)
# Remove rows with missing latitude or longitude
institutions <- institutions %>%
filter(!is.na(IntitutionLatitude) & !is.na(InstitutionLongitude))
# Define color palette for the five systems
color_palette <- c(
"USG" = "#0D4860",       # Dark Blue
"USG-CE" = "#F6931E",    # Orange
"TCSG" = "#8F3776",      # Purple
"TCSG-CE" = "#03A59D",   # Teal
"Private" = "#EBC647"    # Yellow
)
# Create static map with counties colored and institutions as points
create_static_map <- function(county_data, institution_data, color_palette) {
ggplot() +
# Color counties by the random categorical variable
geom_polygon(data = county_data, aes(x = long, y = lat, group = group, fill = category), color = "white", size = 0.2) +
scale_fill_manual(values = c("A" = "#0D4860", "B" = "#F6931E", "C" = "#8F3776", "D" = "#03A59D", "E" = "#EBC647")) +
# Plot the institution points on top of the counties
geom_point(data = institution_data, aes(x = InstitutionLongitude, y = IntitutionLatitude, color = System, text = paste("Institution: ", Institution, "<br>System: ", System)), size = 2) +
scale_color_manual(values = color_palette) +
# Customize the map appearance
coord_map() +
theme_void() +
theme(legend.position = "none") +
labs(title = "Georgia Institutions by System with County Coloring")
}
# Generate the static map with counties and institutions
usg_map <- create_static_map(ga_counties, institutions, color_palette)
# Make the map interactive and show tooltips
ggplotly(usg_map, tooltip = "text")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)  # Hide code globally
# Load county map data for Georgia
ga_counties <- map_data("county") %>% filter(region == "georgia")
# Create a random categorical variable for coloring
set.seed(123)  # Ensures consistent random colors
unique_counties <- unique(ga_counties$subregion)
color_categories <- sample(c("A", "B", "C", "D", "E"), length(unique_counties), replace = TRUE)
county_colors <- data.frame(subregion = unique_counties, category = color_categories)
# Merge color categories with map data
ga_counties <- ga_counties %>%
left_join(county_colors, by = "subregion")
# Connect to the database and fetch institution data
con <- DBI::dbConnect(odbc::odbc(), "sqlserver-ecampus")
sql_query <- "SELECT Institution, IntitutionLatitude, InstitutionLongitude, System FROM [eCampus].[dbo].[ref.Institutions]"
institutions <- DBI::dbGetQuery(con, sql_query)
DBI::dbDisconnect(con)
# Ensure latitude and longitude are numeric
institutions <- institutions %>%
mutate(
IntitutionLatitude = as.numeric(IntitutionLatitude),
InstitutionLongitude = as.numeric(InstitutionLongitude)
)
# Remove rows with missing latitude or longitude
institutions <- institutions %>%
filter(!is.na(IntitutionLatitude) & !is.na(InstitutionLongitude))
# Define color palette for the five systems
color_palette <- c(
"USG" = "#0D4860",       # Dark Blue
"USG-CE" = "#F6931E",    # Orange
"TCSG" = "#8F3776",      # Purple
"TCSG-CE" = "#03A59D",   # Teal
"Private" = "#EBC647"    # Yellow
)
# Create static map with counties colored and institutions as points
create_static_map <- function(county_data, institution_data, color_palette) {
ggplot() +
# Color counties by the random categorical variable
geom_polygon(data = county_data, aes(x = long, y = lat, group = group, fill = category), color = "white", size = 0.2) +
scale_fill_manual(values = c("A" = "#0D4860", "B" = "#F6931E", "C" = "#8F3776", "D" = "#03A59D", "E" = "#EBC647")) +
# Plot the institution points on top of the counties
geom_point(data = institution_data, aes(x = InstitutionLongitude, y = IntitutionLatitude, color = System, text = paste("Institution: ", Institution, "<br>System: ", System)), size = 2) +
scale_color_manual(values = color_palette) +
# Customize the map appearance
coord_map() +
theme_void() +
theme(legend.position = "none") +
labs(title = "Georgia Institutions by System with County Coloring")
}
# Generate the static map with counties and institutions
usg_map <- create_static_map(ga_counties, institutions, color_palette)
# Make the map interactive and show tooltips
ggplotly(usg_map, tooltip = "text")%>%
layout(
margin = list(l = 0, r = 0, b = 0, t = 0))
# Load county map data for Georgia
ga_counties <- map_data("county") %>% filter(region == "georgia")
# Create a random categorical variable for coloring
set.seed(123)  # Ensures consistent random colors
unique_counties <- unique(ga_counties$subregion)
color_categories <- sample(c("A", "B", "C", "D", "E"), length(unique_counties), replace = TRUE)
county_colors <- data.frame(subregion = unique_counties, category = color_categories)
# Merge color categories with map data
ga_counties <- ga_counties %>%
left_join(county_colors, by = "subregion")
# Connect to the database and fetch institution data
con <- DBI::dbConnect(odbc::odbc(), "sqlserver-ecampus")
sql_query <- "SELECT Institution, IntitutionLatitude, InstitutionLongitude, System FROM [eCampus].[dbo].[ref.Institutions]"
institutions <- DBI::dbGetQuery(con, sql_query)
DBI::dbDisconnect(con)
# Ensure latitude and longitude are numeric
institutions <- institutions %>%
mutate(
IntitutionLatitude = as.numeric(IntitutionLatitude),
InstitutionLongitude = as.numeric(InstitutionLongitude)
)
# Remove rows with missing latitude or longitude
institutions <- institutions %>%
filter(!is.na(IntitutionLatitude) & !is.na(InstitutionLongitude))
# Define color palette for the five systems
color_palette <- c(
"USG" = "#0D4860",       # Dark Blue
"USG-CE" = "#F6931E",    # Orange
"TCSG" = "#8F3776",      # Purple
"TCSG-CE" = "#03A59D",   # Teal
"Private" = "#EBC647"    # Yellow
)
# Create static map with counties colored and institutions as points
create_static_map <- function(county_data, institution_data, color_palette) {
ggplot() +
# Color counties by the random categorical variable
geom_polygon(data = county_data, aes(x = long, y = lat, group = group, fill = category), color = "white", size = 0.2) +
scale_fill_manual(values = c("A" = "#0D4860", "B" = "#F6931E", "C" = "#8F3776", "D" = "#03A59D", "E" = "#EBC647")) +
# Plot the institution points on top of the counties
geom_point(data = institution_data, aes(x = InstitutionLongitude, y = IntitutionLatitude, color = System, text = paste("Institution: ", Institution, "<br>System: ", System)), size = 2) +
scale_color_manual(values = color_palette) +
# Customize the map appearance
coord_map() +
theme_void() +
theme(legend.position = "none") +
labs(title = "Georgia Institutions by System with County Coloring")
}
# Generate the static map with counties and institutions
usg_map <- create_static_map(ga_counties, institutions, color_palette)
# Make the map interactive and show tooltips
ggplotly(usg_map, tooltip = "text")
